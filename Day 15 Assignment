# Assignment 1: Custom String Representation for Book class
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
    
    def __str__(self):
        return f"Book: {self.title} by {self.author}"
    
    def __repr__(self):
        return f"Book('{self.title}', '{self.author}')"

books = [
    Book("Gitanjali", "Rabindranath Tagore"),
    Book("The God of Small Things", "Arundhati Roy"),
    Book("Midnight's Children", "Salman Rushdie")
]

print("Using print() function:")
for book in books:
    print(book)

print("\nUsing list representation:")
print(books)

# Assignment 2: Vector Addition Using Operator Overloading
class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)
    
    def __str__(self):
        return f"Vector({self.x}, {self.y})"

delhi_vector = Vector(28, 77)
mumbai_vector = Vector(19, 72)
result_vector = delhi_vector + mumbai_vector

print(f"Delhi coordinates: {delhi_vector}")
print(f"Mumbai coordinates: {mumbai_vector}")
print(f"Sum of vectors: {result_vector}")

# Assignment 3: Employee Comparison with salary comparison operators
class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary
    
    def __gt__(self, other):
        return self.salary > other.salary
    
    def __lt__(self, other):
        return self.salary < other.salary
    
    def __eq__(self, other):
        return self.salary == other.salary
    
    def __str__(self):
        return f"{self.name} - ₹{self.salary:,}"

employees = [
    Employee("Rajesh Sharma", 85000),
    Employee("Priya Patel", 92000),
    Employee("Amit Singh", 78000),
    Employee("Sunita Devi", 85000)
]

print("Employee Salary Comparisons:")
for i in range(len(employees)):
    for j in range(i+1, len(employees)):
        emp1, emp2 = employees[i], employees[j]
        if emp1 > emp2:
            print(f"{emp1.name} earns more than {emp2.name}")
        elif emp1 < emp2:
            print(f"{emp1.name} earns less than {emp2.name}")
        else:
            print(f"{emp1.name} earns same as {emp2.name}")

# Assignment 4: Shopping Cart with operator overloading
class Item:
    def __init__(self, name, price):
        self.name = name
        self.price = price
    
    def __str__(self):
        return f"{self.name} - ₹{self.price}"

class Cart:
    def __init__(self):
        self.items = []
    
    def __add__(self, item):
        new_cart = Cart()
        new_cart.items = self.items.copy()
        new_cart.items.append(item)
        return new_cart
    
    def __len__(self):
        return len(self.items)
    
    def __str__(self):
        if not self.items:
            return "Empty Cart"
        cart_str = "Shopping Cart:\n"
        total = 0
        for item in self.items:
            cart_str += f"- {item}\n"
            total += item.price
        cart_str += f"Total: ₹{total:,}"
        return cart_str

indian_items = [
    Item("Basmati Rice 1kg", 120),
    Item("Amul Butter 500g", 180),
    Item("Tata Tea 250g", 85),
    Item("Maggi Noodles Pack", 60)
]

my_cart = Cart()
print("Adding items to cart:")
for item in indian_items:
    my_cart = my_cart + item
    print(f"Added: {item}")

print(f"\nCart has {len(my_cart)} items")
print(my_cart)

# Assignment 5: Student Grades Display with __str__ and __repr__
class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks
    
    def __str__(self):
        marks_str = ", ".join([f"{subject}: {score}" for subject, score in self.marks.items()])
        return f"Student: {self.name} | Marks: {marks_str}"
    
    def __repr__(self):
        return f"Student('{self.name}', {self.marks})"

indian_students = [
    Student("Arjun Reddy", {"Math": 92, "Science": 88, "English": 85}),
    Student("Kavya Nair", {"Math": 95, "Science": 91, "English": 89}),
    Student("Rohit Gupta", {"Math": 78, "Science": 82, "English": 80})
]

print("Student Details using print():")
for student in indian_students:
    print(student)

print("\nStudent List Representation:")
print(indian_students)

# Additional Example: Indian Currency class with arithmetic operations
class Rupee:
    def __init__(self, amount):
        self.amount = amount
    
    def __add__(self, other):
        return Rupee(self.amount + other.amount)
    
    def __sub__(self, other):
        return Rupee(self.amount - other.amount)
    
    def __mul__(self, factor):
        return Rupee(self.amount * factor)
    
    def __str__(self):
        return f"₹{self.amount:,.2f}"
    
    def __repr__(self):
        return f"Rupee({self.amount})"

salary = Rupee(50000)
bonus = Rupee(8000)
tax = Rupee(3500)

total_income = salary + bonus
net_income = total_income - tax
annual_salary = salary * 12

print("\nIndian Currency Operations:")
print(f"Monthly Salary: {salary}")
print(f"Bonus: {bonus}")
print(f"Tax: {tax}")
print(f"Total Income: {total_income}")
print(f"Net Income: {net_income}")
print(f"Annual Salary: {annual_salary}")
